<?php
/**
 * @file
 * Defines the Issuu Document API functions.
 */

//------------------------------------------------------------------------------
// Issuu Document API functions.
//------------------------------------------------------------------------------

/**
 * Upload a document to a user's profile by specifying its location on the web.
 * The document can be automatically added to a folder once it has been
 * converted.
 *
 * @param array $settings Issuu API settings.
 * @param $file The path to the file which needs to be uploaded.
 * @param $name The name of the document must be 3-50 characters long. Use
 * lowercase letters (a-z), numbers (0-9) and characters (_.-). This value must
 * be unique for the account. In case no value is specified then this name will
 * be autogenerated.
 * @param $title Title of the publication. If no value is specified the filename
 * of the uploaded document will be used.
 * @param $tags List of keywords describing the content.
 * @param $comments_allowed Can other people comment on this document? Default
 * is TRUE.
 * @param $description Description of the document. If not submitted then the
 * system will try to extract a summary of the content. Max length is 1000
 * characters.
 * @param $downloadable Can other people download the original document? Default
 * is FALSE.
 * @param $info_link URL linking to more information about this document.
 * @param $language 2 letter document language code specified by the ISO-639-1.
 * @param $access The document access.
 * @param $explicit If the publication contains explicit content this should be
 * set to TRUE.
 * @param $category The document category to where it belongs.
 * @param $type The document type to which a document physically belongs.
 * @param $ratings_allowed Can other people rate this document? Default is TRUE.
 * @param $sound_url URL to .mp3 or .m3u file which sould play while viewing
 * this document.
 * @param $publish_date Timestamp when this document was originally published.
 * Default is at the time of upload.
 * @param $folder_ids List of folders to copy the document to when processing is
 * done. Use the method issuu_api_folder_list to find the id of a specific
 * folder.
 * @return Returns the uploaded Issuu document information if successful,
 * otherwise an error code is returned.
 */
function issuu_api_document_upload(array $settings, $file, $name = NULL, $title = NULL, array $tags = NULL, $comments_allowed = NULL, $description = NULL, $downloadable = NULL, $info_link = NULL, $language = NULL, $access = NULL, $explicit = NULL, $category = NULL, $type = NULL, $ratings_allowed = NULL, $sound_url = NULL, $publish_date = NULL, array $folder_ids = NULL) {
  try {
    // Construct request parameters.
    $parameters = issuu_api_create_request_parameters();
    $parameters->addFileParam('file', $file);
    $parameters->addStringParam('name', $name);
    $parameters->addStringParam('title', $title);
    $parameters->addStringListParam('tags', $tags);
    $parameters->addBooleanStringParam('commentsAllowed', $comments_allowed);
    $parameters->addStringParam('description', $description);
    $parameters->addBooleanStringParam('downloadable', $downloadable);
    $parameters->addStringParam('infoLink', $info_link);
    $parameters->addEnumParam('language', $language, issuu_api_document_language_codes());
    $parameters->addEnumParam('access', $access, issuu_api_document_accesses());
    $parameters->addBooleanStringParam('explicit', $explicit);
    $parameters->addEnumParam('category', $category, issuu_api_document_categories());
    $parameters->addEnumParam('type', $type, issuu_api_document_types());
    $parameters->addBooleanStringParam('ratingsAllowed', $ratings_allowed);
    $parameters->addUrlParam('soundUrl', $sound_url);
    $parameters->addTimestampParam('publishDate', $publish_date);
    $parameters->addStringListParam('folderIds', $folder_ids);
    // Create client and perform action.
    return issuu_api_create_client(ISSUU_API_CLIENT_API, $settings)->issuu_document_upload($parameters);
  }
  catch (Exception $ex) {
    // Log exception to watchdog.
    watchdog_exception('issuu_api', $ex);
    // Return the error code.
    return $ex->getCode();
  }
}

/**
 * Add a document to a user's profile by specifying its location on the web. The
 * document can be automatically added to a folder once it has been converted.
 * @param array $settings Issuu API settings.
 * @param $slurp_url URL of the document to be uploaded. This location must be
 * public meaning no login or password required to access the resource.
 * @param $name The name of the document must be 3-50 characters long. Use
 * lowercase letters (a-z), numbers (0-9) and characters (_.-). This value must
 * be unique for the account. In case no value is specified then this name will
 * be autogenerated.
 * @param $title Title of the publication. If no value is specified the filename
 * of the uploaded document will be used.
 * @param $tags List of keywords describing the content.
 * @param $comments_allowed Can other people comment on this document? Default
 * is TRUE.
 * @param $description Description of the document. If not submitted then the
 * system will try to extract a summary of the content. Max length is 1000
 * characters.
 * @param $downloadable Can other people download the original document? Default
 * is FALSE.
 * @param $info_link URL linking to more information about this document.
 * @param $language 2 letter document language code specified by the ISO-639-1.
 * @param $access The document access.
 * @param $explicit If the publication contains explicit content this should be
 * set to TRUE.
 * @param $category The document category to where it belongs.
 * @param $type The document type to which a document physically belongs.
 * @param $ratings_allowed Can other people rate this document? Default is TRUE.
 * @param $sound_url URL to .mp3 or .m3u file which sould play while viewing
 * this document.
 * @param $publish_date Timestamp when this document was originally published.
 * Default is at the time of upload.
 * @param $folder_ids List of folders to copy the document to when processing is
 * done. Use the method issuu_api_folder_list to find the id of a specific
 * folder.
 * @return Returns the uploaded Issuu document information if successful,
 * otherwise an error code is returned.
 */
function issuu_api_document_url_upload(array $settings, $slurp_url, $name = NULL, $title = NULL, array $tags = NULL, $comments_allowed = NULL, $description = NULL, $downloadable = NULL, $info_link = NULL, $language = NULL, $access = NULL, $explicit = NULL, $category = NULL, $type = NULL, $ratings_allowed = NULL, $sound_url = NULL, $publish_date = NULL, array $folder_ids = NULL) {
  try {
    // Construct request parameters.
    $parameters = issuu_api_create_request_parameters();
    $parameters->addUrlParam('slurpUrl', $slurp_url);
    $parameters->addStringParam('name', $name);
    $parameters->addStringParam('title', $title);
    $parameters->addStringListParam('tags', $tags);
    $parameters->addBooleanStringParam('commentsAllowed', $comments_allowed);
    $parameters->addStringParam('description', $description);
    $parameters->addBooleanStringParam('downloadable', $downloadable);
    $parameters->addStringParam('infoLink', $info_link);
    $parameters->addEnumParam('language', $language, issuu_api_document_language_codes());
    $parameters->addEnumParam('access', $access, issuu_api_document_accesses());
    $parameters->addBooleanStringParam('explicit', $explicit);
    $parameters->addEnumParam('category', $category, issuu_api_document_categories());
    $parameters->addEnumParam('type', $type, issuu_api_document_types());
    $parameters->addBooleanStringParam('ratingsAllowed', $ratings_allowed);
    $parameters->addUrlParam('soundUrl', $sound_url);
    $parameters->addTimestampParam('publishDate', $publish_date);
    $parameters->addStringListParam('folderIds', $folder_ids);
    // Create client and perform action.
    return issuu_api_create_client(ISSUU_API_CLIENT_API, $settings)->issuu_document_url_upload($parameters);
  }
  catch (Exception $ex) {
    // Log exception to watchdog.
    watchdog_exception('issuu_api', $ex);
    // Return the error code.
    return $ex->getCode();
  }
}

/**
 * List all document belonging to a user profile and which satisfies certain
 * criteria.
 * @param array $settings Issuu API settings.
 * @param $document_states List of document states.
 * @param $access The document access.
 * @param $origins List of document origins.
 * @param $org_doc_types List of original document formats.
 * @param $org_doc_name Original filename of document.
 * @param $result_order The result order. Default value is ascending.
 * @param $start_index Zero based index to start pagination from.
 * @param $page_size Maximum number of documents to be returned. Value must be
 * between 0 - 30. Default is 10.
 * @param $sort_by The response parameter to sort the result by.
 * @param $response_params List of response parameters to be returned. If no
 * value is submitted then all parameters will be returned.
 * @return Returns the Issuu documents list if successful, otherwise an error
 * code is returned.
 */
function issuu_api_document_list(array $settings, array $document_states = NULL, $access = NULL, array $origins = NULL, array $org_doc_types = NULL, $org_doc_name = NULL, $result_order = NULL, $start_index = NULL, $page_size = NULL, $sort_by = NULL, array $response_params = NULL) {
  try {
    // Construct request parameters.
    $parameters = issuu_api_create_request_parameters();
    $parameters->addEnumParam('documentStates', $document_states, issuu_api_document_states());
    $parameters->addEnumParam('access', $access, issuu_api_document_accesses());
    $parameters->addEnumListParam('origins', $origins, issuu_api_document_origins());
    $parameters->addEnumListParam('orgDocTypes', $org_doc_types, issuu_api_document_file_types());
    $parameters->addStringParam('orgDocName', $org_doc_name);
    $parameters->addEnumParam('resultOrder', $result_order, issuu_api_document_result_orders());
    $parameters->addIntegerParam('startIndex', $start_index);
    $parameters->addIntegerParam('pageSize', $page_size);
    $parameters->addEnumParam('documentSortBy', $sort_by, issuu_api_document_response_parameters());
    $parameters->addEnumListParam('responseParams', $response_params, issuu_api_document_response_parameters());
    // Create client and perform action.
    return issuu_api_create_client(ISSUU_API_CLIENT_API, $settings)->issuu_documents_list($parameters);
  }
  catch (Exception $ex) {
    // Log exception to watchdog.
    watchdog_exception('issuu_api', $ex);
    // Return the error code.
    return $ex->getCode();
  }
}

/**
 * Update a document with the given information.
 * @param array $settings Issuu API settings.
 * @param $name Name of the document to update.
 * @param $title Title of the publication.
 * @param $tags List of keywords describing the content.
 * @param $description Description of the document. Max length 1000 characters.
 * @param $language 2 letter document language code specified by the ISO-639-1.
 * @param $category The document category to where it belongs.
 * @param $type The document type to which a document physically belongs.
 * @param $publish_date The timestamp when this document was originally
 * published.
 * @return Returns the updated Issuu document if successful, otherwise an error
 * code is returned.
 */
function issuu_api_document_update(array $settings, $name, $title = NULL, array $tags = NULL, $description = NULL, $language = NULL, $category = NULL, $type = NULL, $publish_date = NULL) {
  try {
    // Construct request parameters.
    $parameters = issuu_api_create_request_parameters();
    $parameters->addStringParam('name', $name);
    $parameters->addStringParam('title', $title);
    $parameters->addStringListParam('tags', $tags);
    $parameters->addStringParam('description', $description);
    $parameters->addEnumParam('language', $language, issuu_api_document_language_codes());
    $parameters->addEnumParam('category', $category, issuu_api_document_categories());
    $parameters->addEnumParam('type', $type, issuu_api_document_types());
    $parameters->addTimestampParam('publishDate', $publish_date);
    // Create client and perform action.
    return issuu_api_create_client(ISSUU_API_CLIENT_API, $settings)->issuu_document_update($parameters);
  }
  catch (Exception $ex) {
    // Log exception to watchdog.
    watchdog_exception('issuu_api', $ex);
    // Return the error code.
    return $ex->getCode();
  }
}

/**
 * Delete one or more documents including all comments and ratings.
 * @param array $settings Issuu API settings.
 * @param $names List of document names.
 * @return Returns  TRUE if the documents were deleted, otherwise an error code
 * is returned.
 */
function issuu_api_document_delete(array $settings, array $names) {
  try {
    // Construct request parameters.
    $parameters = issuu_api_create_request_parameters();
    $parameters->addStringListParam('names', $names);
    // Create client and perform action.
    return issuu_api_create_client(ISSUU_API_CLIENT_API, $settings)->issuu_document_delete($parameters);
  }
  catch (Exception $ex) {
    // Log exception to watchdog.
    watchdog_exception('issuu_api', $ex);
    // Return the error code.
    return $ex->getCode();
  }
}

//------------------------------------------------------------------------------
// Issuu Document API parameter definitions.
//------------------------------------------------------------------------------

/**
 * Get the document langauge codes.
 * @return array Returns an associative array, keyed by the 2 letter language
 * code.
 */
function issuu_api_document_language_codes() {
  $languages = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($languages)) {
    $languages = array(
      'aa' => t('Afar'),
      'ab' => t('Abkhazian'),
      'ae' => t('Avestan'),
      'af' => t('Afrikaans'),
      'ak' => t('Akan'),
      'am' => t('Amharic'),
      'an' => t('Aragonese'),
      'ar' => t('Arabic'),
      'as' => t('Assamese'),
      'av' => t('Avaric'),
      'ay' => t('Aymara'),
      'az' => t('Azerbaijani'),
      'ba' => t('Bashkir'),
      'be' => t('Belarusian'),
      'bg' => t('Bulgarian'),
      'bh' => t('Bihari'),
      'bi' => t('Bislama'),
      'bm' => t('Bambara'),
      'bn' => t('Bengali'),
      'bo' => t('Tibetan'),
      'br' => t('Breton'),
      'bs' => t('Bosnian'),
      'ca' => t('Catalan'),
      'ce' => t('Chechen'),
      'ch' => t('Chamorro'),
      'co' => t('Corsican'),
      'cr' => t('Cree'),
      'cs' => t('Czech'),
      'cu' => t('Church Slavic'),
      'cv' => t('Chuvash'),
      'cy' => t('Welsh'),
      'da' => t('Danish'),
      'de' => t('German'),
      'dv' => t('Divehi'),
      'dz' => t('Dzongkha'),
      'ee' => t('Ewe'),
      'el' => t('Greek'),
      'en' => t('English'),
      'eo' => t('Esperanto'),
      'es' => t('Spanish'),
      'et' => t('Estonian'),
      'eu' => t('Basque'),
      'fa' => t('Persian'),
      'ff' => t('Fulah'),
      'fi' => t('Finnish'),
      'fo' => t('Faroese'),
      'fr' => t('French'),
      'fy' => t('Western Frisian'),
      'ga' => t('Irish'),
      'gd' => t('Scottish Gaelic'),
      'gl' => t('Galician'),
      'gn' => t('Guarani'),
      'gu' => t('Gujarati'),
      'gv' => t('Manx'),
      'ha' => t('Hausa'),
      'he' => t('Hebrew'),
      'hi' => t('Hindi'),
      'ho' => t('Hiri Motu'),
      'hr' => t('Croatian'),
      'ht' => t('Haitian'),
      'hu' => t('Hungarian'),
      'hy' => t('Armenian'),
      'hz' => t('Herero'),
      'ia' => t('Interlingua'),
      'id' => t('Indonesian'),
      'ie' => t('Interlingue'),
      'ig' => t('Igbo'),
      'ii' => t('Sichuan Yi'),
      'ik' => t('Inupiaq'),
      'io' => t('Ido'),
      'is' => t('Icelandic'),
      'it' => t('Italian'),
      'iu' => t('Inuktitut'),
      'ja' => t('Japanese'),
      'jv' => t('Javanese'),
      'ka' => t('Georgian'),
      'kg' => t('Kongo'),
      'ki' => t('Kikuyu'),
      'kj' => t('Kwanyama'),
      'kk' => t('Kazakh'),
      'kl' => t('Kalaallisut'),
      'km' => t('Central Khmer'),
      'kn' => t('Kannada'),
      'ko' => t('Korean'),
      'kr' => t('Kanuri'),
      'ks' => t('Kashmiri'),
      'ku' => t('Kurdish'),
      'kv' => t('Komi'),
      'kw' => t('Cornish'),
      'ky' => t('Kirghiz'),
      'lb' => t('Luxembourgish'),
      'lg' => t('Ganda'),
      'li' => t('Limburgish'),
      'ln' => t('Lingala'),
      'lo' => t('Lao'),
      'lt' => t('Lithuanian'),
      'lu' => t('Luba Katanga'),
      'lv' => t('Latvian'),
      'mg' => t('Malagasy'),
      'mh' => t('Marshallese'),
      'mi' => t('Maori'),
      'mk' => t('Macedonian'),
      'ml' => t('Malayalam'),
      'mn' => t('Mongolian'),
      'mr' => t('Marathi'),
      'ms' => t('Malay'),
      'mt' => t('Maltese'),
      'my' => t('Burmese'),
      'na' => t('Nauru'),
      'nb' => t('Norwegian Bokmal'),
      'nd' => t('North Ndebele'),
      'ne' => t('Nepali'),
      'ng' => t('Ndonga'),
      'nl' => t('Dutch'),
      'nn' => t('Norwegian Nynorsk'),
      'no' => t('Norwegian'),
      'nr' => t('South Ndebele'),
      'nv' => t('Navajo'),
      'ny' => t('Chichewa'),
      'oc' => t('Occitan'),
      'oj' => t('Ojibwa'),
      'om' => t('Oromo'),
      'or' => t('Oriya'),
      'os' => t('Ossetian'),
      'pa' => t('Panjabi'),
      'pi' => t('Pali'),
      'pl' => t('Polish'),
      'ps' => t('Pashto'),
      'pt' => t('Portuguese'),
      'qu' => t('Quechua'),
      'rm' => t('Romansh'),
      'rn' => t('Rundi'),
      'ro' => t('Romanian'),
      'ru' => t('Russian'),
      'rw' => t('Kinyarwanda'),
      'sa' => t('Sanskrit'),
      'sc' => t('Sardinian'),
      'sd' => t('Sindhi'),
      'se' => t('Northem Sami'),
      'sg' => t('Sango'),
      'si' => t('Sinhala'),
      'sk' => t('Slovak'),
      'sl' => t('Slovenian'),
      'sm' => t('Samoan'),
      'sn' => t('Shona'),
      'so' => t('Somali'),
      'sq' => t('Albanian'),
      'sr' => t('Serbian'),
      'ss' => t('Swati'),
      'st' => t('Southern Sotho'),
      'su' => t('Sundanese'),
      'sv' => t('Swedish'),
      'sw' => t('Swahili'),
      'ta' => t('Tamil'),
      'te' => t('Telugu'),
      'tg' => t('Tajik'),
      'th' => t('Thai'),
      'ti' => t('Tigrinya'),
      'tk' => t('Turkmen'),
      'tl' => t('Tagalog'),
      'tn' => t('Tswana'),
      'to' => t('Tonga'),
      'tr' => t('Turkish'),
      'ts' => t('Tsonga'),
      'tt' => t('Tatar'),
      'tw' => t('Twi'),
      'ty' => t('Tahitian'),
      'ug' => t('Uighur'),
      'uk' => t('Ukrainian'),
      'ur' => t('Urdu'),
      'uz' => t('Uzbek'),
      've' => t('Venda'),
      'vi' => t('Vietnamese'),
      'vo' => t('Volapuk'),
      'wa' => t('Walloon'),
      'wo' => t('Wolof'),
      'xh' => t('Xhosa'),
      'yi' => t('Yiddish'),
      'yo' => t('Yoruba'),
      'za' => t('Zhuang'),
      'zh' => t('Chinese'),
      'zu' => t('Zulu'),
    );
  }
  return $languages;
}

/**
 * Get the document categories.
 * @return array Returns an associative array, keyed by the category code.
 */
function issuu_api_document_categories() {
  $categories = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($categories)) {
    $categories = array(
      '000000' => t('Unknown'),
      '001000' => t('Auto and Vehicles'),
      '002000' => t('Business and Marketing'),
      '003000' => t('Creative'),
      '004000' => t('Film and Music'),
      '005000' => t('Fun and Entertainment'),
      '006000' => t('Hobby and Home'),
      '007000' => t('Knowledge and Resources'),
      '008000' => t('Nature and Animals'),
      '009000' => t('News and Politics'),
      '010000' => t('Nonprofits and Activism'),
      '011000' => t('Religon and Philosophy'),
      '012000' => t('Sports'),
      '013000' => t('Technology and Internet'),
      '014000' => t('Travel and Events'),
      '015000' => t('Weird and Bizarre'),
      '016000' => t('Other'),
    );
  }
  return $categories;
}

/**
 * Get the document access levels.
 * @return array Returns an associative array, keyed by the access level.
 */
function issuu_api_document_accesses() {
  $accesses = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($accesses)) {
    $accesses = array(
      'public' => t('Public'),
      'private' => t('Private'),
    );
  }
  return $accesses;
}

/**
 * Get the document types.
 * @return array Returns an associative array, keyed by the type.
 */
function issuu_api_document_types() {
  $types = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($types)) {
    $types = array(
      '000000' => t('Unknown'),
      '001000' => t('Article or Essay'),
      '002000' => t('Book'),
      '003000' => t('Catalog'),
      '004000' => t('Journal'),
      '005000' => t('Magazine'),
      '006000' => t('Manual or Resource'),
      '007000' => t('Newspaper'),
      '008000' => t('Paper'),
      '009000' => t('Photo Album'),
      '010000' => t('Portfolio'),
      '011000' => t('Presentation'),
      '012000' => t('Report'),
      '013000' => t('Other'),
    );
  }
  return $types;
}

/**
 * Get the document states.
 * @return array Returns an associative array, keyed by the state.
 */
function issuu_api_document_states() {
  $states = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($states)) {
    $states = array(
      'A' => t('Active'),
      'F' => t('Failed'),
      'P' => t('Processing'),
    );
  }
  return $states;
}

/**
 * Get the document origins.
 * @return array Returns an associative array, keyed by the origin.
 */
function issuu_api_document_origins() {
  $origins = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($origins)) {
    $origins = array(
      'apiupload' => t('API Upload'),
      'apislurp' => t('API Slurp Upload'),
      'singleupload' => t('Single Upload'),
      'multiupload' => t('Multiple Upload'),
      'singleslurp' => t('Single Slurp Upload'),
      'multislurp' => t('Multiple Slurp Upload'),
      'autoslurp' => t('Auto Slurp Upload'),
    );
  }
  return $origins;
}

/**
 * Get the document file types.
 * @return array Returns an associative array, keyed by the file type.
 */
function issuu_api_document_file_types() {
  $file_types = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($file_types)) {
    $file_types = array(
      'pdf' => t('Adobe PDF'),
      'odt' => t('OpenDocument Text Document'),
      'doc' => t('Microsoft Word Document'),
      'wpd' => t('WordPerfect Document'),
      'sxw' => t('StarOffice Word Document'),
      'sxi' => t('StarOffice Impress Presentation'),
      'rtf' => t('Rich Text Format'),
      'odp' => t('OpenDocument Presentation'),
      'ppt' => t('Microsoft PowerPoint Presentation'),
    );
  }
  return $file_types;
}

/**
 * Get the document result orders.
 * @return array Returns an associative array, keyed by the result order.
 */
function issuu_api_document_result_orders() {
  $result_orders = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($result_orders)) {
    $result_orders = array(
      'asc' => t('Ascending'),
      'desc' => t('Descending'),
    );
  }
  return $result_orders;
}

/**
 * Get the document response parameters.
 * @return array Returns an associative array, keyed by the response parameter.
 */
function issuu_api_document_response_parameters() {
  $response_parameters = &drupal_static(__FUNCTION__);
  // Check if the array is not already initialized.
  if (!isset($response_parameters)) {
    $response_parameters = array(
      'username' => t('Owner'),
      'name' => t('Name'),
      'documentId' => t('Unique identifier'),
      'title' => t('Title'),
      'access' => t('Access'),
      'state' => t('State'),
      'errorCode' => t('Conversion error'),
      'category' => t('Category'),
      'type' => t('Type'),
      'orgDocType' => t('Original document type'),
      'orgDocName' => t('Original document name'),
      'origin' => t('Origin'),
      'language' => t('Language'),
      'pageCount' => t('Page count'),
      'publishDate' => t('Publish date'),
      'description' => t('Description'),
      'tags' => t('Tags'),
      'warnings' => t('Warnings'),
      'folders' => t('Folders'),
    );
  }
  return $response_parameters;
}